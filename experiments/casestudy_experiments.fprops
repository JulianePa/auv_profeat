// This file contains the properties that were used for PRISM experiments.

label "thruster_failure" = s=recover_very_high | s=recover_high | s=recover_med | s=recover_low | s=recover_following;
label "safe" = s=lost_pipe | s=start_task | s=start_search | s=search_very_high| s=search_high | s=search_med | s=search_low | s=found | s=following | s=done;
label "unsafe" = s=abort_mission | s=recover_very_high | s=recover_high | s=recover_med | s=recover_low | s=recover_following;
const int k;

filter(min, Pmin=? [ F<=k "safe" ], "thruster_failure");     // The minimum probability of reaching a safe state in k time steps from a thruster failure state
filter(avg, Pmin=? [ F<=k "safe" ], "thruster_failure");     // The avarage probability of reaching a safe state in k time steps from a thruster failure state
filter(max, Pmin=? [ F<=k "safe" ], "thruster_failure");     // The maximum probability of reaching a safe state in k time steps from a thruster failure state

filter(max, Pmax=? [ F<=k "thruster_failure" ], "safe");        // The maximum probability of reaching a thruster failure state from a safe state
filter(avg, Pmax=? [ F<=k "thruster_failure" ], "safe");        // The avarage probability of reaching a thruster failure state from a safe state
filter(min, Pmax=? [ F<=k "thruster_failure" ], "safe");        // The minimum probability of reaching a thruster failure state from a safe state

filter(max, Pmax=? [ F<=k "unsafe" ], "safe");        // The maximum probability of reaching an unsafe state from a safe state
filter(avg, Pmax=? [ F<=k "unsafe" ], "safe");        // The avarage probability of reaching an unsafe state from a safe state
filter(min, Pmax=? [ F<=k "unsafe" ], "safe");        // The minimum probability of reaching an unsafe state from a safe state