root feature
    all of low, medium, optional high;
endfeature

feature low 
    modules low_medium_high;
endfeature
feature medium 
    modules low_medium_high;
endfeature
feature high 
    modules low_medium;
endfeature

//"normal" states
	const int start = 0;
	const int search_high = 1; 
	const int search_medium = 2;
	const int search_low = 3;
	const int found = 4;
	const int follow = 5;
	const int recover_start = 6;
	const int recover_high = 7;
	const int recover_medium = 8;
	const int recover_low = 9;
	const int recover_found = 10;
	const int recover_follow = 11;

	//from start to searching state
	const int start2search_high = 12; 
	const int start2search_medium= 13;
	const int start2search_low = 14;
	//from searching state to other searching state
	const int search_high2search_medium = 15;
	const int search_high2search_low = 16;
	const int search_medium2search_high = 17;
	const int search_medium2search_low = 18;
	const int search_low2search_high = 19;
	const int search_low2search_medium = 20;
	//from searching state to found
	const int search_high2found = 21;
	const int search_medium2found = 22;
	const int search_low2found = 23;
	//no intermediate state from found to follow
	//from follow to search low (pipeline lost)
	const int follow2search_low = 24;
	//to recover state
	const int search_high2recover_high = 25;
	const int search_medium2recover_medium = 26;
	const int search_low2recover_low = 27;
	const int found2recover_found = 28;
	const int follow2recover_follow = 29;
	const int start2recover_start = 30;
	//final state
	const int done = 31;

module low_medium_high


    //main module
	s : [0..31] init start;
	[a0] (s=start) -> 0.4:(s'=start2search_high) + 0.3:(s'=start2search_medium) + 0.2:(s'=start2search_low) + 0.1:(s'=start2recover_start);
	[a1] (s=search_high) -> 0.3:(s'=search_high2search_medium) + 0.3:(s'=search_high2search_low) + 0.3:(s'=search_high2found) + 0.1:(s'=search_high2recover_high);
	[a2] (s=search_medium) -> 0.3:(s'=search_medium2search_high) + 0.3:(s'=search_medium2search_low) + 0.3:(s'=search_medium2found) + 0.1:(s'=search_medium2recover_medium);
	[a3] (s=search_low) -> 0.3:(s'=search_low2search_high) + 0.3:(s'=search_low2search_medium) + 0.3:(s'=search_low2found) + 0.1:(s'=search_low2recover_low);
	[a4] (s=found) -> 0.9:(s'=follow) + 0.1:(s'=found2recover_found);
	[a5] (s=follow) -> 0.7:(s'=follow2search_low) + 0.2:(s'=done) + 0.1:(s'=recover_follow);
	[a6] (s=recover_start) -> 0.5:(s'=recover_start) + 0.5:(s'=start);
	[a7] (s=recover_high) -> 0.5:(s'=recover_high) + 0.5:(s'=search_high);
	[a8] (s=recover_medium) -> 0.5:(s'=recover_medium) + 0.5:(s'=search_medium);
	[a9] (s=recover_low) -> 0.5:(s'=recover_low) + 0.5:(s'=search_low);
	[a10] (s=recover_found) -> 0.5:(s'=recover_found) + 0.5:(s'=found);
	[a11] (s=recover_follow) -> 0.5:(s'=recover_follow) + 0.5:(s'=follow);
	
	//intermediate states
	//from start to search
	[b0] (s=start2search_high) -> 1:(s'=search_high);
	[b1] (s=start2search_medium) -> 1:(s'=search_medium);
	[b2] (s=start2search_low) -> 1:(s'=search_low);	
	//from search to other search
	[b3] (s=search_high2search_medium) -> 1:(s'=search_medium);	
	[b4] (s=search_high2search_low) -> 1:(s'=search_low);	
	[b5] (s=search_medium2search_high) -> 1:(s'=search_high);
	[b6] (s=search_medium2search_low) -> 1:(s'=search_low);
	[b7] (s=search_low2search_high) -> 1:(s'=search_high);
	[b8] (s=search_low2search_medium) -> 1:(s'=search_medium);
	//from search to found
	[b9] (s=search_high2found) -> 1:(s'=found);
	[b10] (s=search_medium2found) -> 1:(s'=found);
	[b11] (s=search_low2found) -> 1:(s'=found);
	//from follow to search_low
	[b12] (s=follow2search_low) -> 1:(s'=search_low);
	//to recover
	[b13] (s=start2recover_start) -> 1:(s'=recover_start);
	[b14] (s=search_high2recover_high) -> 1:(s'=recover_high);
	[b15] (s=search_medium2recover_medium) -> 1:(s'=recover_medium);
	[b16] (s=search_low2recover_low) -> 1:(s'=recover_low);
	[b17] (s=found2recover_found) -> 1:(s'=recover_found);
	[b18] (s=follow2recover_follow) -> 1:(s'=recover_follow);
endmodule

module low_medium
	
    //main module
	s : [0..31] init start;
	[a0] (s=start) -> 0.5:(s'=start2search_medium) + 0.4:(s'=start2search_low) + 0.1:(s'=start2recover_start);
	[a2] (s=search_medium) -> 0.45:(s'=search_medium2search_low) + 0.45:(s'=search_medium2found) + 0.1:(s'=search_medium2recover_medium);
	[a3] (s=search_low) -> 0.45:(s'=search_low2search_medium) + 0.45:(s'=search_low2found) + 0.1:(s'=search_low2recover_low);
	[a4] (s=found) -> 0.9:(s'=follow) + 0.1:(s'=found2recover_found);
	[a5] (s=follow) -> 0.7:(s'=follow2search_low) + 0.2:(s'=done) + 0.1:(s'=recover_follow);
	[a6] (s=recover_start) -> 0.5:(s'=recover_start) + 0.5:(s'=start);
	[a8] (s=recover_medium) -> 0.5:(s'=recover_medium) + 0.5:(s'=search_medium);
	[a9] (s=recover_low) -> 0.5:(s'=recover_low) + 0.5:(s'=search_low);
	[a10] (s=recover_found) -> 0.5:(s'=recover_found) + 0.5:(s'=found);
	[a11] (s=recover_follow) -> 0.5:(s'=recover_follow) + 0.5:(s'=follow);
	
	//intermediate states
	//from start to search
	[b1] (s=start2search_medium) -> 1:(s'=search_medium);
	[b2] (s=start2search_low) -> 1:(s'=search_low);	
	//from search to other search
	[b6] (s=search_medium2search_low) -> 1:(s'=search_low);
	[b8] (s=search_low2search_medium) -> 1:(s'=search_medium);
	//from search to found
	[b10] (s=search_medium2found) -> 1:(s'=found);
	[b11] (s=search_low2found) -> 1:(s'=found);
	//from follow to search_low
	[b12] (s=follow2search_low) -> 1:(s'=search_low);
	//to recover
	[b13] (s=start2recover_start) -> 1:(s'=recover_start);
	[b15] (s=search_medium2recover_medium) -> 1:(s'=recover_medium);
	[b16] (s=search_low2recover_low) -> 1:(s'=recover_low);
	[b17] (s=found2recover_found) -> 1:(s'=recover_found);
	[b18] (s=follow2recover_follow) -> 1:(s'=recover_follow);

endmodule