mdp

const int max_visibility = 12;
const int min_visibility = 1;
const double current_probability = 0.6;
const int inspect = 10;			// The meters of pipeline that should be inspected

////////////////
// Feature Model
///////////////
root feature
    all of robot;
	modules auv, environment;
    rewards "time"
        [step] true : 1;                    // Every transition is a time step
    endrewards
    rewards "energy"
        // Costs for being in a recovery state
        (s=recover_high) : 2;		
        (s=recover_medium) : 2;
        (s=recover_low) : 2;
        (s=recover_found) : 2;
        (s=recover_following) : 2;

        // Costs for switching altitudes
        (s=search_high) & active(medium) : 2;
        (s=search_high) & active(low) : 4;
        (s=search_medium) & active(high) : 2;
        (s=search_medium) & active(low) : 2;
        (s=search_low) & active(high) : 4;
        (s=search_low) & active(medium) : 2;

        // Costs for going to low altitude when the pipeline is found
        (s=found) & active(high) : 4;
        (s=found) & active(medium) : 2;

		// Costs for all other states
		(s=start) : 1;
		(s=search_high) & active(high) : 1;
		(s=search_medium) & active(medium) : 1;
		(s=search_low) & active(low) : 1;
		(s=found) & active(low) : 1;
		(s=following) : 1;
    endrewards
endfeature

feature robot
    all of navigation, pipeline_inspection;
endfeature

feature navigation
    one of low, medium, high;
	initial constraint active(low);							// To ensure that low is active in the beginning
endfeature

feature pipeline_inspection
    one of search, follow;
	initial constraint active(search);						// To ensure that search is active in the beginning
endfeature

feature low endfeature

feature medium endfeature

feature high endfeature

feature search endfeature

feature follow
	constraint active(follow) => active(low);
endfeature

/////////////////////
// States
////////////////////
const int start = 0;
const int search_high = 1;
const int search_medium = 2;
const int search_low = 3;
const int found = 4;
const int following = 5;
const int recover_high = 6;
const int recover_medium = 7;
const int recover_low = 8;
const int recover_found = 9;
const int recover_following = 10;
const int done = 11;

/////////////////////
/// Modules
////////////////////

// The environment module models the changes in the water visibility
// If there is a current, then the water visibility reduces by 1, if there is not, it increases by 1 or stays the same
module environment
	water_visibility : [min_visibility..max_visibility] init 5;
	[step] true -> current_probability: (water_visibility'= (water_visibility=min_visibility? min_visibility : water_visibility-1))
					+ (1-current_probability)/2: (water_visibility'= (water_visibility=max_visibility? max_visibility : water_visibility+1))
                    + (1-current_probability)/2: true;
endmodule

module auv
	s : [0..11] init start;
	dist_inspected : [0..inspect] init 0;	// The meters of pipeline that are inspected (changed during runtime)

	[step] (s=start & active(high)) -> 1: (s'=search_high);
	[step] (s=start & active(medium)) -> 1: (s'=search_medium);
	[step] (s=start & active(low)) -> 1: (s'=search_low);
	[step] (s=search_high & active(high)) -> 0.55:(s'=found) 
						+ 0.4:(s'=search_high)
						+ 0.05:(s'=recover_high);
	[step] (s=search_high & active(medium)) -> 1:(s'=search_medium);
	[step] (s=search_high & active(low)) -> 1:(s'=search_low);
	[step] (s=search_medium & active(medium)) -> 0.425:(s'=found) 
						+ 0.5: (s'=search_medium)
						+ 0.075:(s'=recover_medium);
	[step] (s=search_medium & active(high)) -> 1:(s'=search_high);
	[step] (s=search_medium & active(low)) -> 1:(s'=search_low);
	[step] (s=search_low & active(low)) -> 0.35:(s'=found)                                
						+ 0.55: (s'=search_low)
						+ 0.1:(s'=recover_low);
	[step] (s=search_low & active(high)) -> 1:(s'=search_high);
	[step] (s=search_low & active(medium)) -> 1:(s'=search_medium);
	[step] (s=found) -> 0.9:(s'=following) 
						+ 0.1:(s'=recover_found);
	[step] (s=following) & (dist_inspected<inspect) -> 0.9: (s'=following) & (dist_inspected'=dist_inspected+1)
						+ 0.1:(s'=recover_following);
	[step] (s=following) & (dist_inspected=inspect)-> (s'=done);
	[step] (s=recover_high) -> 0.5:(s'=recover_high) 
						+ 0.5:(s'=search_high);
	[step] (s=recover_medium) -> 0.5:(s'=recover_medium) 
						+ 0.5:(s'=search_medium);
	[step] (s=recover_low) -> 0.5:(s'=recover_low) 
						+ 0.5:(s'=search_low);
	[step] (s=recover_found) -> 0.5:(s'=recover_found) 
						+ 0.5:(s'=found);
	[step] (s=recover_following) -> 0.5:(s'=recover_following) 
						+ 0.5:(s'=following);
	[step] (s=done) -> 1:(s'=done);
endmodule

/////////////////
// Feature Controller
////////////////
controller
	[step] (s=found) & active(search) -> deactivate(search) & activate(follow) & activate(low) & deactivate(medium) & deactivate(high);

	[step] (s!=found) & active(search) & water_visibility<2 -> activate(low) & deactivate(high) & deactivate(medium);
	[step] (s!=found) & active(search) & 2<=water_visibility & water_visibility<6 -> activate(low) & deactivate(medium) & deactivate(high);
	[step] (s!=found) & active(search) & 2<=water_visibility & water_visibility<6 -> activate(medium) & deactivate(low) & deactivate(high);
	[step] (s!=found) & active(search) & 6<=water_visibility -> activate(low) & deactivate(medium) & deactivate(high);
	[step] (s!=found) & active(search) & 6<=water_visibility -> activate(medium) & deactivate(low) & deactivate(high);
	[step] (s!=found) & active(search) & 6<=water_visibility -> activate(high) & deactivate(low) & deactivate(medium);

	[step] active(follow) -> true;
endcontroller